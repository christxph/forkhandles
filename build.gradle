buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:_")
        classpath("org.kt3k.gradle.plugin:coveralls-gradle-plugin:_")
        classpath("com.google.devtools.ksp:com.google.devtools.ksp.gradle.plugin:_")
    }
}

plugins {
    id("com.github.kt3k.coveralls")
    id("io.codearte.nexus-staging")
    id("org.jetbrains.kotlin.plugin.serialization")
    id("com.google.devtools.ksp")
}

apply plugin: "io.codearte.nexus-staging"

allprojects {

    repositories {
        mavenCentral()
    }

    apply(plugin: "kotlin")
    apply(plugin: "jacoco")
    apply(plugin: "com.github.kt3k.coveralls")
    apply(plugin: "maven-publish")
    apply(plugin: "java-test-fixtures")

    jacoco {
        toolVersion = "0.8.9"
    }

    compileKotlin.kotlinOptions.jvmTarget = "1.8"
    compileKotlin.kotlinOptions.freeCompilerArgs += "-Xcontext-receivers"

    compileTestKotlin.kotlinOptions.jvmTarget = "1.8"
    compileTestKotlin.kotlinOptions.freeCompilerArgs += "-Xcontext-receivers"

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    version = project.hasProperty("releaseVersion") ? project.releaseVersion : "LOCAL"
    group = "dev.forkhandles"

    test {
        useJUnitPlatform()
    }

    jacocoTestReport {
        reports {
            html.required = true
            xml.required = true
        }
    }

    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }

    apply(plugin: "com.google.devtools.ksp")

    sourceSets {
        main {
            kotlin.srcDir("build/generated/ksp/main/kotlin")
        }

        test {
            kotlin.srcDir("build/generated/ksp/test/kotlin")
        }
    }

}

subprojects {

    jar {
        manifest {
            attributes "Implementation-Title": project.name,
                "Implementation-Vendor": "dev.forkhandles",
                "Implementation-Version": project.version,
                "forkhandles_version": archiveVersion
        }
    }

    tasks.register("sourcesJar", Jar) {
        dependsOn classes
        archiveClassifier = "sources"
        from sourceSets.main.allSource
    }

    tasks.register("javadocJar", Jar) {
        dependsOn javadoc
        archiveClassifier = "javadoc"
        from javadoc.destinationDir
    }

    tasks.register("testJar", Jar) {
        archiveClassifier = "test"
        from sourceSets.test.output
    }

    configurations {
        testArtifacts.extendsFrom testRuntime
    }

    artifacts {
        testArtifacts testJar
        archives sourcesJar, javadocJar
    }

    dependencies {
        api(Kotlin.stdlib)
        testApi(Testing.junit.jupiter.api)
        testApi(Testing.junit.jupiter.engine)
        testApi("com.natpryce:hamkrest:_")
    }

    def enableSigning = project.findProperty("sign") == "true"

    apply plugin: "maven-publish"

    if (enableSigning) { // when added it expects signing keys to be configured
        apply plugin: "signing"

        signing {
            def signingKey = findProperty("signingKey")
            def signingPassword = findProperty("signingPassword")

            useInMemoryPgpKeys(signingKey, signingPassword)
            sign publishing.publications
        }
    }

    def nexusUsername = project.findProperty("nexusUsername") ?: "notset"
    def nexusPassword = project.findProperty("nexusPassword") ?: "notset"

    publishing {
        repositories {
            maven {
                name "SonatypeStaging"
                url "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                credentials {
                    username nexusUsername
                    password nexusPassword
                }
            }
            maven {
                name "SonatypeSnapshot"
                url "https://oss.sonatype.org/content/repositories/snapshots/"
                credentials {
                    username nexusUsername
                    password nexusPassword
                }
            }
        }

        publications {
            mavenJava(MavenPublication) {
                artifactId = archivesBaseName

                pom.withXml {
                    asNode().appendNode("name", archivesBaseName)
                    asNode().appendNode("description", description)
                    asNode().appendNode("url", "https://forkhandles.dev")
                    asNode().appendNode("developers")
                        .appendNode("developer").appendNode("name", "Nat Pryce").parent().appendNode("email", "nat@forkhandles.dev")
                        .parent().parent()
                        .appendNode("developer").appendNode("name", "David Denton").parent().appendNode("email", "david@forkhandles.dev")
                        .parent().parent()
                        .appendNode("developer").appendNode("name", "Dmitry Kandalov").parent().appendNode("email", "dmitry@forkhandles.dev")
                        .parent().parent()
                        .appendNode("developer").appendNode("name", "Duncan McGregor").parent().appendNode("email", "duncan@forkhandles.dev")
                    asNode().appendNode("scm").
                        appendNode("url", "git@github.com:fork-handles/forkhandles.git").parent().
                        appendNode("connection", "scm:git:git@github.com:fork-handles/forkhandles.git").parent().
                        appendNode("developerConnection", "scm:git:git@github.com:fork-handles/forkhandles.git")
                    asNode().appendNode("licenses").appendNode("license").
                        appendNode("name", "Apache License, Version 2.0").parent().
                        appendNode("url", "http://www.apache.org/licenses/LICENSE-2.0.html")
                }
                from components.java

                // replace all runtime dependencies with provided
                pom.withXml {
                    asNode().dependencies."*".findAll() {
                        it.scope.text() == "runtime"
                    }.each() {
                        it.scope*.value = "provided"
                    }
                }
                artifact sourcesJar
                artifact javadocJar
            }
        }
    }
}

compileTestKotlin.kotlinOptions {
    jvmTarget = "1.8"
    freeCompilerArgs += "-Xjvm-default=enable"
}

coveralls {
    sourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs).files.absolutePath
    jacocoReportPath = file("${buildDir}/reports/jacoco/test/jacocoRootReport.xml")
}

tasks.register("jacocoRootReport", JacocoReport) {
    dependsOn = subprojects.test
    getSourceDirectories().from(subprojects.sourceSets.main.allSource.srcDirs)
    getClassDirectories().from(subprojects.sourceSets.main.output)
    getExecutionData().from(subprojects.findAll { it.name != "forkhandles-bom" }.jacocoTestReport.executionData)

    reports {
        html.required = true
        csv.required = false
        xml.required = true
        xml.outputLocation = file("${buildDir}/reports/jacoco/test/jacocoRootReport.xml")
    }
}

dependencies {
    subprojects
        .forEach {
            api project(it.name)
        }
}

sourceSets {
    test {
        kotlin {
            srcDirs "src/test/kotlin"
            srcDirs "src/docs"
        }
        resources {
            srcDir "src/docs"
        }
    }
}
